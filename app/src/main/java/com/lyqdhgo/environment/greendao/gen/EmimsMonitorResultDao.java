package com.lyqdhgo.environment.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyqdhgo.environment.entity.EmimsMonitorResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMIMS_MONITOR_RESULT".
*/
public class EmimsMonitorResultDao extends AbstractDao<EmimsMonitorResult, Long> {

    public static final String TABLENAME = "EMIMS_MONITOR_RESULT";

    /**
     * Properties of entity EmimsMonitorResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MonitorTaskId = new Property(1, String.class, "monitorTaskId", false, "MONITOR_TASK_ID");
        public final static Property MonitorId = new Property(2, String.class, "monitorId", false, "MONITOR_ID");
        public final static Property FactorId = new Property(3, String.class, "factorId", false, "FACTOR_ID");
        public final static Property LocationId = new Property(4, String.class, "locationId", false, "LOCATION_ID");
        public final static Property MonitorType = new Property(5, String.class, "monitorType", false, "MONITOR_TYPE");
        public final static Property MonitorDate = new Property(6, String.class, "monitorDate", false, "MONITOR_DATE");
        public final static Property TimeInterval = new Property(7, String.class, "timeInterval", false, "TIME_INTERVAL");
        public final static Property MonitorValue = new Property(8, String.class, "monitorValue", false, "MONITOR_VALUE");
        public final static Property OverProoflag = new Property(9, String.class, "overProoflag", false, "OVER_PROOFLAG");
        public final static Property SyncFlag = new Property(10, String.class, "syncFlag", false, "SYNC_FLAG");
        public final static Property StandardMaxValue = new Property(11, String.class, "standardMaxValue", false, "STANDARD_MAX_VALUE");
        public final static Property StandardMinValue = new Property(12, String.class, "standardMinValue", false, "STANDARD_MIN_VALUE");
        public final static Property Unit = new Property(13, String.class, "unit", false, "UNIT");
        public final static Property CreateDate = new Property(14, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property CreateUser = new Property(15, String.class, "createUser", false, "CREATE_USER");
        public final static Property UpdateDate = new Property(16, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
        public final static Property UpdateUser = new Property(17, String.class, "updateUser", false, "UPDATE_USER");
        public final static Property Remarks = new Property(18, String.class, "remarks", false, "REMARKS");
    }


    public EmimsMonitorResultDao(DaoConfig config) {
        super(config);
    }
    
    public EmimsMonitorResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMIMS_MONITOR_RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MONITOR_TASK_ID\" TEXT," + // 1: monitorTaskId
                "\"MONITOR_ID\" TEXT," + // 2: monitorId
                "\"FACTOR_ID\" TEXT," + // 3: factorId
                "\"LOCATION_ID\" TEXT," + // 4: locationId
                "\"MONITOR_TYPE\" TEXT," + // 5: monitorType
                "\"MONITOR_DATE\" TEXT," + // 6: monitorDate
                "\"TIME_INTERVAL\" TEXT," + // 7: timeInterval
                "\"MONITOR_VALUE\" TEXT," + // 8: monitorValue
                "\"OVER_PROOFLAG\" TEXT," + // 9: overProoflag
                "\"SYNC_FLAG\" TEXT," + // 10: syncFlag
                "\"STANDARD_MAX_VALUE\" TEXT," + // 11: standardMaxValue
                "\"STANDARD_MIN_VALUE\" TEXT," + // 12: standardMinValue
                "\"UNIT\" TEXT," + // 13: unit
                "\"CREATE_DATE\" INTEGER," + // 14: createDate
                "\"CREATE_USER\" TEXT," + // 15: createUser
                "\"UPDATE_DATE\" INTEGER," + // 16: updateDate
                "\"UPDATE_USER\" TEXT," + // 17: updateUser
                "\"REMARKS\" TEXT);"); // 18: remarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMIMS_MONITOR_RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmimsMonitorResult entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String monitorTaskId = entity.getMonitorTaskId();
        if (monitorTaskId != null) {
            stmt.bindString(2, monitorTaskId);
        }
 
        String monitorId = entity.getMonitorId();
        if (monitorId != null) {
            stmt.bindString(3, monitorId);
        }
 
        String factorId = entity.getFactorId();
        if (factorId != null) {
            stmt.bindString(4, factorId);
        }
 
        String locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindString(5, locationId);
        }
 
        String monitorType = entity.getMonitorType();
        if (monitorType != null) {
            stmt.bindString(6, monitorType);
        }
 
        String monitorDate = entity.getMonitorDate();
        if (monitorDate != null) {
            stmt.bindString(7, monitorDate);
        }
 
        String timeInterval = entity.getTimeInterval();
        if (timeInterval != null) {
            stmt.bindString(8, timeInterval);
        }
 
        String monitorValue = entity.getMonitorValue();
        if (monitorValue != null) {
            stmt.bindString(9, monitorValue);
        }
 
        String overProoflag = entity.getOverProoflag();
        if (overProoflag != null) {
            stmt.bindString(10, overProoflag);
        }
 
        String syncFlag = entity.getSyncFlag();
        if (syncFlag != null) {
            stmt.bindString(11, syncFlag);
        }
 
        String standardMaxValue = entity.getStandardMaxValue();
        if (standardMaxValue != null) {
            stmt.bindString(12, standardMaxValue);
        }
 
        String standardMinValue = entity.getStandardMinValue();
        if (standardMinValue != null) {
            stmt.bindString(13, standardMinValue);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(14, unit);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(15, createDate.getTime());
        }
 
        String createUser = entity.getCreateUser();
        if (createUser != null) {
            stmt.bindString(16, createUser);
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(17, updateDate.getTime());
        }
 
        String updateUser = entity.getUpdateUser();
        if (updateUser != null) {
            stmt.bindString(18, updateUser);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(19, remarks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmimsMonitorResult entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String monitorTaskId = entity.getMonitorTaskId();
        if (monitorTaskId != null) {
            stmt.bindString(2, monitorTaskId);
        }
 
        String monitorId = entity.getMonitorId();
        if (monitorId != null) {
            stmt.bindString(3, monitorId);
        }
 
        String factorId = entity.getFactorId();
        if (factorId != null) {
            stmt.bindString(4, factorId);
        }
 
        String locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindString(5, locationId);
        }
 
        String monitorType = entity.getMonitorType();
        if (monitorType != null) {
            stmt.bindString(6, monitorType);
        }
 
        String monitorDate = entity.getMonitorDate();
        if (monitorDate != null) {
            stmt.bindString(7, monitorDate);
        }
 
        String timeInterval = entity.getTimeInterval();
        if (timeInterval != null) {
            stmt.bindString(8, timeInterval);
        }
 
        String monitorValue = entity.getMonitorValue();
        if (monitorValue != null) {
            stmt.bindString(9, monitorValue);
        }
 
        String overProoflag = entity.getOverProoflag();
        if (overProoflag != null) {
            stmt.bindString(10, overProoflag);
        }
 
        String syncFlag = entity.getSyncFlag();
        if (syncFlag != null) {
            stmt.bindString(11, syncFlag);
        }
 
        String standardMaxValue = entity.getStandardMaxValue();
        if (standardMaxValue != null) {
            stmt.bindString(12, standardMaxValue);
        }
 
        String standardMinValue = entity.getStandardMinValue();
        if (standardMinValue != null) {
            stmt.bindString(13, standardMinValue);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(14, unit);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(15, createDate.getTime());
        }
 
        String createUser = entity.getCreateUser();
        if (createUser != null) {
            stmt.bindString(16, createUser);
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(17, updateDate.getTime());
        }
 
        String updateUser = entity.getUpdateUser();
        if (updateUser != null) {
            stmt.bindString(18, updateUser);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(19, remarks);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EmimsMonitorResult readEntity(Cursor cursor, int offset) {
        EmimsMonitorResult entity = new EmimsMonitorResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // monitorTaskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // monitorId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // factorId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // locationId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // monitorType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // monitorDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timeInterval
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // monitorValue
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // overProoflag
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // syncFlag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // standardMaxValue
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // standardMinValue
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // unit
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // createDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // createUser
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // updateDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // updateUser
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // remarks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmimsMonitorResult entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMonitorTaskId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMonitorId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFactorId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocationId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMonitorType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMonitorDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeInterval(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMonitorValue(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOverProoflag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSyncFlag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStandardMaxValue(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStandardMinValue(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUnit(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreateDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setCreateUser(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUpdateDate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setUpdateUser(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRemarks(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmimsMonitorResult entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmimsMonitorResult entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmimsMonitorResult entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
